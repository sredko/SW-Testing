{"name":"SW-testing","tagline":"Running iOS Unittest on Simulator.app with Jenkins","body":"## Prerequisites\r\n\r\n* You have already deployed [Jenkins](http://jenkins-ci.org) continuous integration solution up and running on your server and configured Mac OS X workstation as slave node responsible for building your product for Apple's iOS platform.\r\n* You have already implemented Application unit tests (tests that work by hosting the test bundle inside of the Application) and want them running  during of Jenkins job that builds your iOS product.\r\n\r\nAs of Xcode 4.6, Apple still doesn't support running Application type of tests in command line builds, however solution like [ios-sim](https://npmjs.org/package/ios-sim) integrated in [Google's iPhoneUnitTesting  ](http://code.google.com/p/google-toolbox-for-mac/wiki/iPhoneUnitTesting) exists for this.\r\n\r\n## Problem\r\n\r\nThe ios-sim tool is a command-line utility that launches an iOS application on the iOS Simulator. However it (or any other similar tool) wont work as expected when called within SSH session used by Jenkins [as configured](https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-ShellScriptsandWindowsBatchCommands) to initiate job on slave node.\r\n\r\nThis happens because logged SSH session is managed by launch daemon on Mac and cannot have connections with system Window Server required to launch UI applications (See picture 1). More information can be found [here](https://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/DesigningDaemons.html#//apple_ref/doc/uid/10000172i-SW4-SW9) \r\n\r\n\r\n![test](https://raw.github.com/sredko/SW-Testing/master/art/Jenkins-iOS1.png)\r\nPicture 1\r\n\r\n\r\n## Solution\r\n\r\nIt is needed to initiate invocation of tool that launches Simulator within context of some regular logged user session and pass results of Unittests execution back to SSH session for sending them back to Jenkins server (Picture 2).\r\n\r\n![test](https://raw.github.com/sredko/SW-Testing/master/art/Jenkins-iOS2.png)\r\nPicture 2\r\n\r\n## Step by step guide\r\n\r\nSolution can be performed according to the following steps:\r\n\r\n1. Install Jenkins on Mac OS X slave node\r\n2. [Transfer job configuration](https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins#AdministeringJenkins-Moving%2Fcopying%2Frenamingjobs) that \"Builds and Runs Unittests\" from Jenkins Master server to Jenkins installed on Mac\r\n3. Configure Jenkins on Mac to be launched within some dedicated user login context:\r\n\r\n>     sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\r\n>     sudo mv /Library/LaunchDaemons/org.jenkins-ci.plist ~/Library/LaunchAgents/\r\n>     sudo chown LOGGED_USERNAME:staff ~/Library/LaunchAgents/org.jenkins-ci.plist\r\n\r\nIn org.jenkins-ci.plist set the following values for keys:\r\nGroupName: staff\r\nUserName: LOGGED_USERNAME\r\n\r\n4. Restart. `sudo launchctl load ~/Library/LaunchAgents/org.jenkins-ci.plist` didn't help me\r\n5. On Master Jenkins instead of job configuration (transferred to Mac slave in #2) add \"mediation\" shell script that  will use Jenkins [CLI - command line interface](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI) to initiate job by Jenkins installed on Mac from logged used session context:\r\n\r\n>     #/bin/sh\r\n> \r\n>     java -jar jenkins-cli.jar -s http://127.0.0.1:8080/  build -s -v 'ACTUAL_JOB_NAME'\r\n> \r\n>     status=$?\r\n>     if [ \"${status}\" -ne \"0\" ]; then\r\n>         echo \"ERROR: FAILED TO BUILD PRODUCT\"\r\n>         exit 1\r\n>     fi\r\n>     echo \"SUCCESS\"\r\n\r\nAlso please note that you should have PATH env variable set to find Jenkins HOME directory.\r\nPassed parameters will make initiated process from SSH session wait for job completion and read full console log from performed job. So full log and execution result will be delivered back to Master server.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}